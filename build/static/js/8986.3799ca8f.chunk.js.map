{"version":3,"file":"static/js/8986.3799ca8f.chunk.js","mappings":"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","sources":["app/form/DataGridD.js","app/form/OrderTable.js","app/views/order/OrderList.js"],"sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showCustomerDispatch } from 'reducers/HomeReducer';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { useState } from 'react';\n\nconst columns = [\n\t{ field: 'id', headerName: 'ID', width: 90 },\n\t{\n\t\tfield: 'name',\n\t\theaderName: 'Name',\n\t\twidth: 150,\n\t\teditable: true\n\t},\n\t{\n\t\tfield: 'email',\n\t\theaderName: 'Email',\n\t\twidth: 150,\n\t\teditable: true\n\t},\n\t{\n\t\tfield: 'created_at',\n\t\theaderName: 'Created At',\n\t\ttype: 'number',\n\t\twidth: 110,\n\t\teditable: true\n\t},\n];\n\nconst rows = [\n\t{ id: 1, name: 'Snow', email: 'Jon', created_at: 35 },\n];\n\nexport default function DataGridD() {\n\n\tconst initialEditedData = {};\n\tconst dispatch = useDispatch(); \n\tconst [customerInfo,setCustomerInfo] = useState([])\n\n\tuseEffect(()=>{\n\t\tconsole.log(localStorage.getItem(\"token\"),\"customer token\")\n\t\t// dispatch(showCustomerDispatch());\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\t\t'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\t\t\t}\n\t\t};\n\n\t\t\tfetch('https://loofer.bellazza.in/api/admin/all_users',{\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\t\t\t\t}\n\t\t\t}).then(response => response.json())\n\t\t\t\t.then(res => {\n\t\t\t\t\tconsole.log(res,'res reeees')\n\t\t\t\t\tlet customer=[];\n\t\t\t\t\tif(res){\n\t\t\t\t\tres.users.map((val)=>{\n\t\t\t\t\t\tcustomer.push(val)\n\t\t\t\t\t})\n\t\t\t\t\tsetCustomerInfo(customer);\n\n\t\t\t\t\tconsole.log({res});\n\t\t\t\t}\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.error({err});\n\t\t\t\t});\n\t\t\t\n\n\t},[])\n\n\tconst mapCategoryDataToRows = (data) => {\n\t\tconsole.log(data, 'data');\n\t\tif (data && Array.isArray(data) && data.length > 0) {\n\t\t  return data.map((category) => ({\n\t\t\tid: category?.id||Math.floor(new Date().getTime()),\n\t\t\tname: category?.name,\n\t\t\temail: category?.email,\n\t\t\t\n\t\t\tcreated_at: new Date(category.created_at).toDateString(),\n\t\t\t// Map other properties as needed\n\t\t  }));\n\t\t} else {\n\t\t  return [\n\t\t\t{ id: 1, name: 'Snow', email: 'Jon', created_at:\"\"},\n\t\t  ];\n\t\t}\n\t  };\n\tvar rows = mapCategoryDataToRows(customerInfo);\n\treturn (\n\t\t<Box sx={{ height: 400, width: '100%' }}>\n\t\t\t{/* {console.log(customerInfo,'customerInfo')} */}\n\t\t\t<DataGrid\n\t\t\t\trows={customerInfo.length ? customerInfo : rows}\n\t\t\t\tcolumns={columns}\n\t\t\t\tgetRowId={(row) => row.id || 2 }\n\t\t\t\t// initialState={{\n\t\t\t\t// \tpagination: {\n\t\t\t\t// \t\tpaginationModel: {\n\t\t\t\t// \t\t\tpageSize: 5\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }}\n\t\t\t\t// pageSizeOptions={[5]}\n\t\t\t\tcheckboxSelection\n\t\t\t\tdisableRowSelectionOnClick\n\t\t\t/>\n\t\t</Box>\n\t);\n}\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport Button from '@mui/material/Button';\nimport { Link, useNavigate } from 'react-router-dom';\n\n\nconst rows = [\n\t{ id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n\t{ id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n\t{ id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n\t{ id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n\t{ id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n\t{ id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n\t{ id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n\t{ id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n\t{ id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 }\n];\n\nexport default function OrderTable() {\n\tconst [orderInfo,setOrderInfo] = useState([])\n\tconst navigate = useNavigate();\n\n\n\tuseEffect(()=>{\n\t\tconsole.log(localStorage.getItem(\"token\"),\"customer token\")\n\t\t// dispatch(showCustomerDispatch());\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\t\t'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\t\t\t}\n\t\t};\n\n\t\taxios.post('https://loofer.bellazza.in/api/getAllOrder', null, {\n\t\t\theaders: {\n\t\t\t  'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\t\t\t}\n\t\t  }).then(res => {\n\t\t\t\t\tconsole.log(res,'res reeees')\n\t\t\t\t\tlet orders=[];\n\t\t\t\t\tif(res.status===200 && res.data){\n\t\t\t\t\t\tif(res.data.data.length > 0){\n\t\t\t\t\t\tsetOrderInfo(res.data.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.error({err});\n\t\t\t\t});\n\t\t\t\n\n\t},[])\n\n\tconst columns = [\n\t\t{ field: 'user_id', headerName: 'ID', width: 90 },\n\t\t{\n\t\t\tfield: 'name',\n\t\t\theaderName: 'Name',\n\t\t\twidth: 150,\n\t\t\teditable: true\n\t\t},\n\t\t// {\n\t\t// \tfield: 'order_item',\n\t\t// \theaderName: 'Order Items',\n\t\t// \twidth: 300, // Adjust the width as needed\n\t\t// \tsortable: false,\n\t\t// \trenderCell: (params) => (\n\t\t// \t  <ul>\n\t\t// \t\t{params.value.map((item, index) => (\n\t\t// \t\t  <li key={index}>\n\t\t// \t\t\t<strong>ID:</strong> {item.id}<br />\n\t\t// \t\t\t<strong>Order ID:</strong> {item.order_id}<br />\n\t\t// \t\t\t<strong>Product ID:</strong> {item.product_id}<br />\n\t\t// \t\t\t{/* Add other properties here */}\n\t\t// \t\t  </li>\n\t\t// \t\t))}\n\t\t// \t  </ul>\n\t\t// \t),\n\t\t//   },\n\t\t{\n\t\t\tfield: 'amount',\n\t\t\theaderName: 'Amount',\n\t\t\ttype: 'number',\n\t\t\twidth: 110,\n\t\t\teditable: true\n\t\t},\n\t\t{\n\t\t\tfield: 'transaction_id',\n\t\t\theaderName: 'Transaction ID',\n\t\t\tdescription: 'This column has a value getter and is not sortable.',\n\t\t\tsortable: false,\n\t\t\twidth: 280,\n\t\t},\n\t\t\n\t\t\n\t\t{\n\t\t\tfield: 'payment_status',\n\t\t\theaderName: 'Payment Status',\n\t\t\tdescription: 'This column has a value getter and is not sortable.',\n\t\t\tsortable: false,\n\t\t\twidth: 160,\n\t\t},\n\t\t{\n\t\t\tfield: 'status',\n\t\t\theaderName: 'Order status',\n\t\t\tdescription: 'This column has a value getter and is not sortable.',\n\t\t\tsortable: false,\n\t\t\twidth: 160,\n\t\t\trenderCell: (params) => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t{params?.value==1?(\n\t\t\t\t\t\t<p>Confirmed</p>\n\t\t\t\t\t):\"\"}\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tfield: 'viewDetails',\n\t\t\theaderName: 'View Details',\n\t\t\twidth: 150,\n\t\t\tsortable: false,\n\t\t\trenderCell: (params) => (\n\t\t\t  <Button\n\t\t\t\tvariant=\"outlined\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tonClick={() => navigate(`/dashboard/orderdetails`, { state: { ID: params.id } })}\n\t\t\t  >\n\t\t\t\tView\n\t\t\t  </Button>\n\t\t\t),\n\t\t  },\n\t\t\n\t];\n\n\treturn (\n\t\t<Box sx={{ height: 400, width: '100%' }}>\n\t\t\t<DataGrid\n\t\t\t\trows={orderInfo}\n\t\t\t\tcolumns={columns}\n\t\t\t\t// initialState={{\n\t\t\t\t// \tpagination: {\n\t\t\t\t// \t\tpaginationModel: {\n\t\t\t\t// \t\t\tpageSize: 5\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }}\n\t\t\t\t// pageSizeOptions={[5]}\n\t\t\t\t// checkboxSelection\n\t\t\t\t// disableRowSelectionOnClick\n\t\t\t/>\n\t\t</Box>\n\t);\n}\n","import DataGridD from 'app/form/DataGridD';\nimport React from 'react';\nimport { Box, Divider } from '@mui/material';\nimport OrderTable from 'app/form/OrderTable';\n\nconst OrderList = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Box\n\t\t\t\tstyle={{\n\t\t\t\t\tboxShadow:\n\t\t\t\t\t\t'rgba(0, 0, 0, 0.06) 0px 3px 3px -2px, rgba(0, 0, 0, 0.04) 0px 3px 4px 0px, rgba(0, 0, 0, 0.04) 0px 1px 8px 0px',\n\t\t\t\t\tpadding: 30,\n\t\t\t\t\tbackground: 'white'\n\t\t\t\t}}>\n\t\t\t\t<h2>Order List</h2>\n\t\t\t\t<Divider style={{ marginTop: 20, marginBottom: 20 }} />\n\t\t\t\t<OrderTable />\n\t\t\t</Box>\n\t\t</div>\n\t);\n};\n\nexport default OrderList;\n  "],"names":["columns","field","headerName","width","editable","type","DataGridD","useDispatch","useState","customerInfo","setCustomerInfo","useEffect","console","log","localStorage","getItem","fetch","headers","then","response","json","res","customer","users","map","val","push","catch","err","error","data","rows","Array","isArray","length","category","id","Math","floor","Date","getTime","name","email","created_at","toDateString","sx","height","getRowId","row","checkboxSelection","disableRowSelectionOnClick","OrderTable","orderInfo","setOrderInfo","navigate","useNavigate","axios","status","description","sortable","renderCell","params","value","variant","color","onClick","state","ID","style","boxShadow","padding","background","marginTop","marginBottom"],"sourceRoot":""}