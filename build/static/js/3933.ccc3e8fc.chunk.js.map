{"version":3,"file":"static/js/3933.ccc3e8fc.chunk.js","mappings":"yOASMA,EAAU,CACf,CAAEC,MAAO,KAAMC,WAAY,KAAMC,MAAO,IACxC,CACCF,MAAO,OACPC,WAAY,OACZC,MAAO,IACPC,UAAU,GAEX,CACCH,MAAO,QACPC,WAAY,QACZC,MAAO,IACPC,UAAU,GAEX,CACCH,MAAO,aACPC,WAAY,aACZG,KAAM,SACNF,MAAO,IACPC,UAAU,IAQG,SAASE,KAGNC,EAAAA,EAAAA,MAAjB,IACA,GAAuCC,EAAAA,EAAAA,UAAS,IAAhD,eAAOC,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,WACTC,QAAQC,IAAIC,aAAaC,QAAQ,SAAS,kBAKxB,UAAhB,OAA2BD,aAAaC,QAAQ,UAIjDC,MAAM,iDAAiD,CACtDC,QAAS,CACR,cAAgB,UAAhB,OAA2BH,aAAaC,QAAQ,aAE/CG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACdF,MAAK,SAAAG,GACLT,QAAQC,IAAIQ,EAAI,cAChB,IAAIC,EAAS,GACVD,IACHA,EAAIE,MAAMC,KAAI,SAACC,GACdH,EAASI,KAAKD,EACd,IACDf,EAAgBY,GAEhBV,QAAQC,IAAI,CAACQ,IAAAA,IAEb,IAAEM,OAAM,SAAAC,GACRhB,QAAQiB,MAAM,CAACD,IAAAA,GACf,GAGH,GAAC,IAEF,IAA+BE,EAiB3BC,GAjB2BD,EAiBErB,EAhBhCG,QAAQC,IAAIiB,EAAM,QACdA,GAAQE,MAAMC,QAAQH,IAASA,EAAKI,OAAS,EACxCJ,EAAKN,KAAI,SAACW,GAAD,MAAe,CAChCC,IAAY,OAARD,QAAQ,IAARA,OAAA,EAAAA,EAAUC,KAAIC,KAAKC,OAAM,IAAIC,MAAOC,WACxCC,KAAI,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAUM,KAChBC,MAAK,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAUO,MAEjBC,WAAY,IAAIJ,KAAKJ,EAASQ,YAAYC,eALzB,IAST,CACR,CAAER,GAAI,EAAGK,KAAM,OAAQC,MAAO,MAAOC,WAAW,MAKlD,OACC,SAAC,IAAD,CAAKE,GAAI,CAAEC,OAAQ,IAAK3C,MAAO,QAA/B,UAEC,SAAC,KAAD,CACC4B,KAAMtB,EAAayB,OAASzB,EAAesB,EAC3C/B,QAASA,EACT+C,SAAU,SAACC,GAAD,OAASA,EAAIZ,IAAM,CAAnB,EASVa,mBAAiB,EACjBC,4BAA0B,KAI7B,C,0FC3FD,UAlBwB,WACvB,OACC,0BACC,UAAC,IAAD,CACCC,MAAO,CACNC,UACC,iHACDC,QAAS,GACTC,WAAY,SALd,WAOC,2CACA,SAAC,IAAD,CAASH,MAAO,CAAEI,UAAW,GAAIC,aAAc,OAC/C,SAAC,IAAD,QAIH,C","sources":["app/form/DataGridD.js","app/views/customer/CustomerSection.js"],"sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showCustomerDispatch } from 'reducers/HomeReducer';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { useState } from 'react';\n\nconst columns = [\n\t{ field: 'id', headerName: 'ID', width: 90 },\n\t{\n\t\tfield: 'name',\n\t\theaderName: 'Name',\n\t\twidth: 150,\n\t\teditable: true\n\t},\n\t{\n\t\tfield: 'email',\n\t\theaderName: 'Email',\n\t\twidth: 150,\n\t\teditable: true\n\t},\n\t{\n\t\tfield: 'created_at',\n\t\theaderName: 'Created At',\n\t\ttype: 'number',\n\t\twidth: 110,\n\t\teditable: true\n\t},\n];\n\nconst rows = [\n\t{ id: 1, name: 'Snow', email: 'Jon', created_at: 35 },\n];\n\nexport default function DataGridD() {\n\n\tconst initialEditedData = {};\n\tconst dispatch = useDispatch(); \n\tconst [customerInfo,setCustomerInfo] = useState([])\n\n\tuseEffect(()=>{\n\t\tconsole.log(localStorage.getItem(\"token\"),\"customer token\")\n\t\t// dispatch(showCustomerDispatch());\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'multipart/form-data',\n\t\t\t\t'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\t\t\t}\n\t\t};\n\n\t\t\tfetch('https://loofer.bellazza.in/api/admin/all_users',{\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${localStorage.getItem(\"token\")}`\n\t\t\t\t}\n\t\t\t}).then(response => response.json())\n\t\t\t\t.then(res => {\n\t\t\t\t\tconsole.log(res,'res reeees')\n\t\t\t\t\tlet customer=[];\n\t\t\t\t\tif(res){\n\t\t\t\t\tres.users.map((val)=>{\n\t\t\t\t\t\tcustomer.push(val)\n\t\t\t\t\t})\n\t\t\t\t\tsetCustomerInfo(customer);\n\n\t\t\t\t\tconsole.log({res});\n\t\t\t\t}\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tconsole.error({err});\n\t\t\t\t});\n\t\t\t\n\n\t},[])\n\n\tconst mapCategoryDataToRows = (data) => {\n\t\tconsole.log(data, 'data');\n\t\tif (data && Array.isArray(data) && data.length > 0) {\n\t\t  return data.map((category) => ({\n\t\t\tid: category?.id||Math.floor(new Date().getTime()),\n\t\t\tname: category?.name,\n\t\t\temail: category?.email,\n\t\t\t\n\t\t\tcreated_at: new Date(category.created_at).toDateString(),\n\t\t\t// Map other properties as needed\n\t\t  }));\n\t\t} else {\n\t\t  return [\n\t\t\t{ id: 1, name: 'Snow', email: 'Jon', created_at:\"\"},\n\t\t  ];\n\t\t}\n\t  };\n\tvar rows = mapCategoryDataToRows(customerInfo);\n\treturn (\n\t\t<Box sx={{ height: 400, width: '100%' }}>\n\t\t\t{/* {console.log(customerInfo,'customerInfo')} */}\n\t\t\t<DataGrid\n\t\t\t\trows={customerInfo.length ? customerInfo : rows}\n\t\t\t\tcolumns={columns}\n\t\t\t\tgetRowId={(row) => row.id || 2 }\n\t\t\t\t// initialState={{\n\t\t\t\t// \tpagination: {\n\t\t\t\t// \t\tpaginationModel: {\n\t\t\t\t// \t\t\tpageSize: 5\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }}\n\t\t\t\t// pageSizeOptions={[5]}\n\t\t\t\tcheckboxSelection\n\t\t\t\tdisableRowSelectionOnClick\n\t\t\t/>\n\t\t</Box>\n\t);\n}\n","import DataGridD from 'app/form/DataGridD';\nimport React from 'react';\nimport { Box, Divider } from '@mui/material';\n\nconst CustomerSection = () => {\n\treturn (\n\t\t<div>\n\t\t\t<Box\n\t\t\t\tstyle={{\n\t\t\t\t\tboxShadow:\n\t\t\t\t\t\t'rgba(0, 0, 0, 0.06) 0px 3px 3px -2px, rgba(0, 0, 0, 0.04) 0px 3px 4px 0px, rgba(0, 0, 0, 0.04) 0px 1px 8px 0px',\n\t\t\t\t\tpadding: 30,\n\t\t\t\t\tbackground: 'white'\n\t\t\t\t}}>\n\t\t\t\t<h2>Customer List</h2>\n\t\t\t\t<Divider style={{ marginTop: 20, marginBottom: 20 }} />\n\t\t\t\t<DataGridD />\n\t\t\t</Box>\n\t\t</div>\n\t);\n};\n\nexport default CustomerSection;\n"],"names":["columns","field","headerName","width","editable","type","DataGridD","useDispatch","useState","customerInfo","setCustomerInfo","useEffect","console","log","localStorage","getItem","fetch","headers","then","response","json","res","customer","users","map","val","push","catch","err","error","data","rows","Array","isArray","length","category","id","Math","floor","Date","getTime","name","email","created_at","toDateString","sx","height","getRowId","row","checkboxSelection","disableRowSelectionOnClick","style","boxShadow","padding","background","marginTop","marginBottom"],"sourceRoot":""}